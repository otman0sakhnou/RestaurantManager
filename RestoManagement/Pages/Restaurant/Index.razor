@page "/index"
@using RestoManagement.BlazorApp.Services
@using RestoManagement.Domain.DTOs
@using RestoManagement.Services
@using Microsoft.AspNetCore.Components.Authorization
@using RestoManagement.Components
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject RestaurantService restaurantService
@inject NavigationManager NavigationManager
@inject CustomAuthStateProvider AuthStateProvider

<div class="@(_isDarkMode ? "bg-dark text-light" : "bg-light") min-vh-100 py-4">
    <div class="container">
        <div class="row align-items-center mb-4">
            <div class="col-lg-6">
                <h1 class="display-5 fw-bold mb-2">Vos Restaurants</h1>
                <AuthorizeView Roles="Admin">
                    <Authorized>
                        <p class="text-muted mb-0">Gérez et explorez votre collection de restaurants</p>
                    </Authorized>
                </AuthorizeView>
            </div>
            <div class="col-lg-6">
                <div class="row g-2 text-center">
                    <div class="col-4">
                        <div class="card border-0 shadow-sm @(_isDarkMode ? "bg-dark text-light border-secondary" : "bg-white")">
                            <div class="card-body py-3">
                                <h3 class="mb-0 fw-bold text-success">@Restaurants.Count()</h3>
                                <p class="small text-muted mb-0">Total Restaurants</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="card border-0 shadow-sm @(_isDarkMode ? "bg-dark text-light border-secondary" : "bg-white")">
                            <div class="card-body py-3">
                                <h3 class="mb-0 fw-bold text-success">@(Restaurants.Any() ? Restaurants.Average(r => r.Note).ToString("F1") : "0.0")</h3>
                                <p class="small text-muted mb-0">Note Moyenne</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="card border-0 shadow-sm @(_isDarkMode ? "bg-dark text-light border-secondary" : "bg-white")">
                            <div class="card-body py-3">
                                <h3 class="mb-0 fw-bold text-success">@(Restaurants.Select(r => r.Cuisine).Distinct().Count())</h3>
                                <p class="small text-muted mb-0">Types de Cuisine</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card shadow-sm mb-4 border-0 @(_isDarkMode ? "bg-dark text-light" : "bg-white")">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6 col-lg-4">
                        <div class="input-group">
                            <span class="input-group-text @(_isDarkMode ? "bg-dark text-light border-secondary" : "")">
                                <i class="bi bi-search"></i>
                            </span>
                            <input type="text" value="@SearchTerm" @oninput="e => SearchTermChanged(e.Value.ToString())"
                                   placeholder="Rechercher des restaurants..." class="form-control @(_isDarkMode ? "bg-dark text-light border-secondary" : "")" />
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-3">
                        <select class="form-select @(_isDarkMode ? "bg-dark text-light border-secondary" : "")" value="@SelectedCuisine" @onchange="CuisineChanged">
                            <option value="">Toutes les cuisines</option>
                            @foreach (var cuisine in Cuisines)
                            {
                                <option value="@cuisine">@cuisine</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6 col-lg-3">
                        <select class="form-select @(_isDarkMode ? "bg-dark text-light border-secondary" : "")" value="@SortOption" @onchange="SortOptionChanged">
                            <option value="">Pas de tri</option>
                            <option value="name_asc">Nom (A-Z)</option>
                            <option value="name_desc">Nom (Z-A)</option>
                            <option value="rating_desc">Meilleures notes</option>
                            <option value="rating_asc">Moins bonnes notes</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        @if (IsLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-success" role="status">
                    <span class="visually-hidden">Chargement...</span>
                </div>
                <p class="mt-3 text-muted">Chargement des restaurants...</p>
            </div>
        }
        @if (HasError)
        {
            <div class="alert alert-danger d-flex align-items-center" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2 fs-4"></i>
                <div>
                    <h5 class="alert-heading">Erreur de chargement des restaurants</h5>
                    <p class="mb-0">@ErrorMessage</p>
                    <button class="btn btn-outline-danger mt-2" @onclick="LoadRestaurants">
                        <i class="bi bi-arrow-clockwise me-2">Réessayer</i>
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="row g-4" id="restaurantGrid">
                @foreach (var restaurant in PagedRestaurants)
                {
                    <div class="col-md-6 col-lg-4">
                        <div class="card h-100 shadow-sm restaurant-card @(_isDarkMode ? "bg-dark text-light border-secondary" : "")"
                             @onclick="() => NavigateToDetails(restaurant.Id)">
                            <div class="position-relative overflow-hidden">
                                @if (!string.IsNullOrEmpty(restaurant.ImagePath))
                                {
                                    <img src="@GetRestaurantImageUrl(restaurant.ImagePath)" alt="@restaurant.Nom"
                                         class="card-img-top" style="height: 200px; object-fit: cover;">
                                }
                                else
                                {
                                    <img src="@($"https://source.unsplash.com/400x250/?restaurant,{restaurant.Cuisine?.Replace(" ", "")}")"
                                         alt="@restaurant.Nom" class="card-img-top" style="height: 200px; object-fit: cover;">
                                }

                                <div class="position-absolute top-0 end-0 m-3">
                                    <span class="badge bg-warning text-dark d-flex align-items-center">
                                        <i class="bi bi-star-fill me-1"></i>
                                        @restaurant.Note
                                    </span>
                                </div>

                                <div class="restaurant-overlay">
                                    <button class="btn btn-sm btn-light" @onclick="() => NavigateToDetails(restaurant.Id)" @onclick:stopPropagation>
                                        <i class="bi bi-eye"></i> Voir détails
                                    </button>
                                </div>
                            </div>

                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <h5 class="card-title mb-0 text-truncate">@restaurant.Nom</h5>
                                    <span class="badge bg-light text-dark">@restaurant.Cuisine</span>
                                </div>

                                <div class="mb-3 @(_isDarkMode ? "text-light" : "text-muted")">
                                    <div class="d-flex align-items-start mb-2">
                                        <i class="bi bi-geo-alt me-2 mt-1 flex-shrink-0"></i>
                                        <span class="small text-truncate">@restaurant.Adresse</span>
                                    </div>
                                </div>

                                <div class="mb-2">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= Math.Floor(restaurant.Note))
                                        {
                                            <i class="bi bi-star-fill text-warning"></i>
                                        }
                                        else if (i <= Math.Ceiling(restaurant.Note) && restaurant.Note % 1 != 0)
                                        {
                                            <i class="bi bi-star-half text-warning"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-star text-warning"></i>
                                        }
                                    }
                                    <span class="ms-2 small text-muted">(@restaurant.Note)</span>
                                </div>
                            </div>

                            <div class="card-footer @(_isDarkMode ? "bg-dark border-secondary" : "bg-light")">
                                <div class="d-flex justify-content-between align-items-center">
                                    <button class="btn btn-sm btn-outline-success" @onclick="() => NavigateToDetails(restaurant.Id)" @onclick:stopPropagation>
                                        <i class="bi bi-eye me-1"></i> Détails
                                    </button>
                                    <AuthorizeView Roles="Admin">
                                        <Authorized>
                                            <div>
                                                <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => NavigateToEdit(restaurant.Id)" @onclick:stopPropagation>
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(restaurant)" @onclick:stopPropagation>
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </Authorized>
                                    </AuthorizeView>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            @if (TotalPages > 1)
            {
                <div class="d-flex justify-content-center mt-4">
                    <PaginationComponent
                        CurrentPage="CurrentPage"
                        TotalPages="TotalPages"
                        OnPageChanged="ChangePage" />
                </div>
            }

            @if (!FilteredRestaurants.Any() && !IsLoading)
            {
                <div class="text-center py-5 empty-state">
                    <div class="empty-state-icon mb-4">
                        <i class="bi bi-shop text-muted"></i>
                    </div>
                    <h3 class="fs-4 fw-medium mb-2">Aucun restaurant trouvé</h3>
                    <p class="text-muted mb-4">@GetEmptyStateMessage()</p>
                    <div class="d-flex justify-content-center gap-3">
                        <button class="btn btn-outline-secondary" @onclick="ResetFilters">
                            <i class="bi bi-arrow-counterclockwise me-2"></i>Réinitialiser les filtres
                        </button>
                    </div>
                </div>
            }
        }
    </div>
</div>

<div class="modal fade @(_showDeleteModal ? "show" : "")" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel"
     style="display: @(_showDeleteModal ? "block" : "none")" aria-modal="@_showDeleteModal" role="dialog">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content @(_isDarkMode ? "bg-dark text-light" : "")">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirmer la suppression</h5>
                <button type="button" class="btn-close" @onclick="CloseDeleteModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="text-center mb-4">
                    <i class="bi bi-exclamation-triangle text-danger" style="font-size: 3rem;"></i>
                </div>
                <p>Êtes-vous sûr de vouloir supprimer le restaurant <strong>@(_restaurantToDelete?.Nom)</strong> ?</p>
                <p class="text-danger small">Cette action est irréversible.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Annuler</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteRestaurant">
                    <i class="bi bi-trash me-2"></i>Supprimer
                </button>
            </div>
        </div>
    </div>
</div>

@if (_showDeleteModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private IEnumerable<RestaurantRes> Restaurants = new List<RestaurantRes>();
    private IEnumerable<RestaurantRes> FilteredRestaurants = new List<RestaurantRes>();
    private IEnumerable<RestaurantRes> PagedRestaurants = new List<RestaurantRes>();
    private List<string> Cuisines = new List<string>();
    private string SearchTerm = "";
    private string SelectedCuisine = "";
    private string SortOption = "";
    private bool _isDarkMode;
    private bool IsLoading = true;
    private bool HasError = false;
    private string ErrorMessage = "";
    private bool IsAdmin = false;

    private int CurrentPage = 1;
    private int PageSize = 6;
    private int TotalPages => (int)Math.Ceiling(FilteredRestaurants.Count() / (double)PageSize);

    private bool _showDeleteModal = false;
    private RestaurantRes _restaurantToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadRestaurants();
    }

    private async Task LoadRestaurants()
    {
        try
        {
            IsLoading = true;
            HasError = false;
            ErrorMessage = "";
            StateHasChanged();

            Restaurants = await restaurantService.GetAllAsync();

            Cuisines = Restaurants.Select(r => r.Cuisine).Where(c => !string.IsNullOrEmpty(c)).Distinct().OrderBy(c => c).ToList();

            FilteredRestaurants = Restaurants;

            UpdatePagedResults();

            IsLoading = false;
        }
        catch (Exception ex)
        {
            IsLoading = false;
            HasError = true;
            ErrorMessage = ex.Message;
            Console.WriteLine($"Erreur lors du chargement des restaurants: {ex.Message}");
        }
    }

    private string GetRestaurantImageUrl(string imagePath)
    {
        if (string.IsNullOrEmpty(imagePath))
            return string.Empty;

        // Construire l'URL complète en utilisant le baseAddress du HttpClient
        return $"{Http.BaseAddress}{imagePath}";
    }

    private void FilterRestaurants()
    {
        FilteredRestaurants = Restaurants;

        if (!string.IsNullOrWhiteSpace(SearchTerm))
        {
            string searchLower = SearchTerm.ToLower();
            FilteredRestaurants = FilteredRestaurants.Where(r =>
                (r.Nom?.ToLower().Contains(searchLower) ?? false) ||
                (r.Cuisine?.ToLower().Contains(searchLower) ?? false) ||
                (r.Adresse?.ToLower().Contains(searchLower) ?? false)
            );
        }

        if (!string.IsNullOrWhiteSpace(SelectedCuisine))
        {
            FilteredRestaurants = FilteredRestaurants.Where(r => r.Cuisine == SelectedCuisine);
        }

        ApplySorting();

        CurrentPage = 1;

        UpdatePagedResults();
    }

    private void ApplySorting()
    {
        if (!string.IsNullOrEmpty(SortOption))
        {
            FilteredRestaurants = SortOption switch
            {
                "name_asc" => FilteredRestaurants.OrderBy(r => r.Nom),
                "name_desc" => FilteredRestaurants.OrderByDescending(r => r.Nom),
                "rating_desc" => FilteredRestaurants.OrderByDescending(r => r.Note),
                "rating_asc" => FilteredRestaurants.OrderBy(r => r.Note),
                _ => FilteredRestaurants
            };
        }
    }

    private void SortOptionChanged(ChangeEventArgs e)
    {
        SortOption = e.Value?.ToString() ?? "";
        FilterRestaurants();
    }

    private void CuisineChanged(ChangeEventArgs e)
    {
        SelectedCuisine = e.Value?.ToString() ?? "";
        FilterRestaurants();
    }

    private void SearchTermChanged(string value)
    {
        SearchTerm = value;
        FilterRestaurants();
    }

    private void UpdatePagedResults()
    {
        PagedRestaurants = FilteredRestaurants
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize);
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > TotalPages || page == CurrentPage)
            return;

        IsLoading = true;
        StateHasChanged();

        await Task.Delay(10);

        CurrentPage = page;
        UpdatePagedResults();

        IsLoading = false;
        StateHasChanged();
    }

    private void ResetFilters()
    {
        SearchTerm = "";
        SelectedCuisine = "";
        SortOption = "";
        FilterRestaurants();
    }

    private string GetEmptyStateMessage()
    {
        if (!string.IsNullOrEmpty(SearchTerm) || !string.IsNullOrEmpty(SelectedCuisine))
        {
            return "Essayez d'ajuster votre recherche ou vos filtres pour trouver ce que vous cherchez.";
        }
        else
        {
            return "Vous n'avez pas encore ajouté de restaurants. Commencez par ajouter votre premier restaurant.";
        }
    }

    private void NavigateToDetails(Guid id)
    {
        NavigationManager.NavigateTo($"/index/details/{id}");
    }

    private void NavigateToEdit(Guid id)
    {
        NavigationManager.NavigateTo($"/index/edit/{id}");
    }

    private void ConfirmDelete(RestaurantRes restaurant)
    {
        _restaurantToDelete = restaurant;
        _showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        _showDeleteModal = false;
        _restaurantToDelete = null;
    }

    private async Task DeleteRestaurant()
    {
        if (_restaurantToDelete != null)
        {
            try
            {
                await restaurantService.DeleteAsync(_restaurantToDelete.Id);
                Restaurants = Restaurants.Where(r => r.Id != _restaurantToDelete.Id).ToList();
                FilterRestaurants();
                await JSRuntime.InvokeVoidAsync("showToast", "Succès", "Restaurant supprimé avec succès", "success");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Erreur", $"Échec de la suppression: {ex.Message}", "error");
            }
            finally
            {
                CloseDeleteModal();
            }
        }
    }
}